plot(Dist_ref_Denormalized,Pred_dist_denormalized, ylim=c(0,150), xlim=c(0,150))
cor.test(Dist_ref_Denormalized,Pred_dist_denormalized)$estimate^2
#plot the data
scat_data <- tibble(Dist_ref=Dist_ref_Denormalized,Pred_distanc=Pred_dist_denormalized)
scat_par <- ggplot(scat_data,aes(Dist_ref,Pred_distanc))+geom_point()+geom_smooth() #+geom_abline(color="orange", slope = 1, linetype ="dotdash",size=1)
scat_par+xlab("Refrence distance")+ylab("Predicted distance")+theme(axis.text=element_text(size=14),
axis.title=element_text(size=16),
panel.background = element_rect(fill = "white", color = "black"))
#+geom_smooth()
abline(0,150, col="red")
#plot the data
scat_data <- tibble(Dist_ref=Dist_ref_Denormalized,Pred_distanc=Pred_dist_denormalized)
scat_par <- ggplot(scat_data,aes(Dist_ref,Pred_distanc))+geom_point()+geom_smooth() #+geom_abline(color="orange", slope = 1, linetype ="dotdash",size=1)
scat_par+xlab("Refrence distance")+ylab("Predicted distance")+theme(axis.text=element_text(size=14),
axis.title=element_text(size=16),
panel.background = element_rect(fill = "white", color = "black"))
library(ggplot2)
library(tibble)
path= "D:\PhD Project\01 Workshop\12 Manuscript\02 Figures\Angle_Distance"
plot(Dist_ref_Denormalized,Pred_dist_denormalized, ylim=c(0,150), xlim=c(0,150))
cor.test(Dist_ref_Denormalized,Pred_dist_denormalized)$estimate^2
#plot the data
scat_data <- tibble(Dist_ref=Dist_ref_Denormalized,Pred_distanc=Pred_dist_denormalized)
scat_par <- ggplot(scat_data,aes(Dist_ref,Pred_distanc))+geom_point()+geom_smooth() #+geom_abline(color="orange", slope = 1, linetype ="dotdash",size=1)
scat_par+xlab("Refrence distance")+ylab("Predicted distance")+theme(axis.text=element_text(size=14),
axis.title=element_text(size=16),
panel.background = element_rect(fill = "white", color = "black"))
Fjaponica <- "C:/Users/salim/Desktop/01 PhD project/01 Knotweed Orthophoto/01 CNN images/01 Reynoutria Japonica/"
tf$compat$v1$set_random_seed(as.integer(28))
Fjaponica <- "C:/Users/salim/Desktop/01 PhD project/01 Knotweed Orthophoto/01 CNN images/01 Reynoutria Japonica/"
library(magick)
require(keras)
library(tensorflow)
library(tfdatasets)
library(tidyverse)
library(tibble)
library(rsample)
library(countcolors)
library(reticulate)
library(gtools)
tf$compat$v1$set_random_seed(as.integer(28))
# set memory growth policy
gpu1 <- tf$config$experimental$get_visible_devices('GPU')[[1]]
#gpu2 <- tf$config$experimental$get_visible_devices('GPU')[[2]]
tf$config$experimental$set_memory_growth(device = gpu1, enable = TRUE)
workdir = "C:/Users/salim/Desktop/Spkeboom/"
#set the image size
xres = 256L
yres = 256L
n_bands = 3L
path_img1 = mixedsort(list.files(Fjaponica, full.names = T,pattern = ".jpg", recursive = T))
path_img1
########################################################## tfdatasets input pipeline
create_dataset <- function(data,
train, # logical. TRUE for augmentation of training data
batch, # numeric. multiplied by number of available gpus since batches will be split between gpus
epochs,
shuffle, # logical. default TRUE, set FALSE for test data
dataset_size){ # numeric. number of samples per epoch the model will be trained on
if(shuffle){
dataset = data %>%
tensor_slices_dataset() %>%
dataset_shuffle(buffer_size = length(data$img), reshuffle_each_iteration = TRUE)
} else {
dataset = data %>%
tensor_slices_dataset()
}
dataset = dataset %>%
dataset_map(~.x %>% purrr::list_modify( # read files and decode png
#img = tf$image$decode_png(tf$io$read_file(.x$img), channels = no_bands)
img = tf$image$decode_jpeg(tf$io$read_file(.x$img)
, channels = n_bands
#, ratio = down_ratio
, try_recover_truncated = TRUE
, acceptable_fraction=0.5
) %>%
tf$image$convert_image_dtype(dtype = tf$float32) %>%
tf$keras$preprocessing$image$smart_resize(size=c(xres, yres))))
#old resize function for tensorflow 2.2
#     tf$image$resize(preserve_aspect_ratio = TRUE, size = as.integer(c(ceiling(xres*2.1)
#                                                                       ,ceiling(yres*2.1)))
#     ) %>%
#     tf$image$resize_with_crop_or_pad(target_height = yres, target_width = xres)
#
# ))  #, num_parallel_calls = tf$data$experimental$AUTOTUNE)
#
# if(train) {
#
#   dataset = dataset %>%
#     dataset_repeat(count = ceiling(epochs *(dataset_size/length(train_data$img))))}
if(train) {
#data augmentation
dataset = dataset %>%
dataset_map(~.x %>% purrr::list_modify(
img= tf$add(.x$img,k_random_normal(shape = list(1, 1),  stddev = 0.05, dtype = tf$float32)) %>%
tf$image$random_flip_left_right() %>%
tf$image$random_brightness(max_delta = 0.1, seed = 1L) %>%
tf$image$random_contrast(lower = 0.9, upper = 1.1) %>%
tf$image$random_saturation(lower = 0.9, upper = 1.1) %>% # requires 3 chnl -> with useDSM chnl = 4
tf$clip_by_value(0, 1) # clip the values into [0,1] range.
)) %>% #,num_parallel_calls = tf$data$experimental$AUTOTUNE
#),num_parallel_calls = NULL) %>%
dataset_repeat(count = ceiling(epochs *(dataset_size/length(train_data$img))))}
dataset = dataset %>%
dataset_batch(batch, drop_remainder = TRUE) %>%
dataset_map(unname) %>%
#dataset_prefetch(buffer_size = tf$data$experimental$AUTOTUNE)
dataset_prefetch_to_device(device = "/gpu:0", buffer_size =tf$data$experimental$AUTOTUNE)
}
create_dataset
allimages <- create_dataset(path_img1,train = False, batch = 1)
allimages <- create_dataset(path_img1,train = False, batch = 1,shuffle = FALSE)
path_img1
path_img1 <- tibble(img=path_img1)
allimages <- create_dataset(path_img1,train = False, batch = 1,shuffle = FALSE)
allimages <- create_dataset(path_img1,train = False, batch = 1,shuffle = FALSE)
allimages <- create_dataset(path_img1,train = False, batch = 1,shuffle = TRUE)
allimages <- create_dataset(path_img1, batch = 1,shuffle = TRUE)
allimages <- create_dataset(path_img1,train = FALSE, batch = 1,shuffle = TRUE)
allimages
allimages <- create_dataset(path_img1,train = FALSE, batch = 1,shuffle = FALSE)
getwd()
model <- load_model_hdf5("C:/Users/salim/Desktop/01 PhD project/December workshop/01 Distance_filterModel/weights.49-0.03.hdf5")
model
model1 <- load_model_hdf5("C:/Users/salim/Desktop/01 PhD project/December workshop/01 Distance_filterModel/weights.49-0.03.hdf5")
predictions <- predict(model1,allimages)
predictions
###
#min and max of original data
minofdata_dist <- 0.1
maxofdata_dist <- 150
#function
denormalize <- function(x,minofdata,maxofdata) {
x*(maxofdata-minofdata) + minofdata
}
#Dist
Pred_dist_denormalized <-denormalize(predictions,minofdata_dist,maxofdata_dist )
Pred_dist_denormalized
###################################################################plot the result
Predicaton_check <- tibble(testdata,pred=Pred_dist_denormalized)
###################################################################plot the result
Predicaton_check <- tibble(model1,pred=Pred_dist_denormalized)
model1
###################################################################plot the result
Predicaton_check <- tibble(allimages,pred=Pred_dist_denormalized)
allimages
###################################################################plot the result
Predicaton_check <- tibble(path_img1,pred=Pred_dist_denormalized)
Predicaton_check
Predicaton_check$pred
Predicaton_check$pred[,1]
Predicaton_check$pred[1:length(path)]
path <- Predicaton_check$img
Predicaton_check$pred[1:length(path)]
#copy files
newpath <- paste0(getwd(),"/December_Distance_check/img_",round(Predicaton_check$pred[1:length(path)],digits = 2),1:length(path),".JPG")
newpath
getwd()
#copy files
newpath <- paste0(getwd(),"/C:/Users/salim/Desktop/01 PhD project/01 Knotweed Orthophoto/01 CNN images/Distance_prediction/img_",round(Predicaton_check$pred[1:length(path)],digits = 2),1:length(path),".JPG")
newpath
file.copy(from = path,to=newpath)
paste0(getwd(),"/C:/Users/salim/Desktop/01 PhD project/01 Knotweed Orthophoto/01 CNN images/Distance_prediction/img_",round(Predicaton_check$pred[1:length(path)],digits = 2),1:length(path),".JPG")
path <- Predicaton_check$img %>% unlist()
path <- Predicaton_check$img %>% unlist()
#copy files
newpath <- paste0(getwd(),"/C:/Users/salim/Desktop/01 PhD project/01 Knotweed Orthophoto/01 CNN images/Distance_prediction/img_",round(Predicaton_check$pred[1:length(path)],digits = 2),1:length(path),".JPG")
file.copy(from = path,to=newpath)
path
path <- Predicaton_check$img %>% unlist(.,use.names=FALSE)
#copy files
newpath <- paste0(getwd(),"/C:/Users/salim/Desktop/01 PhD project/01 Knotweed Orthophoto/01 CNN images/Distance_prediction/img_",round(Predicaton_check$pred[1:length(path)],digits = 2),1:length(path),".JPG")
file.copy(from = path,to=newpath)
file.copy(from = path[1],to=newpath[1])
#copy files
newpath <- paste0(getwd(),"C:/Users/salim/Desktop/01 PhD project/01 Knotweed Orthophoto/01 CNN images/Distance_prediction/img_",round(Predicaton_check$pred[1:length(path)],digits = 2),1:length(path),".JPG")
file.copy(from = path[1],to=newpath[1])
#copy files
newpath <- paste0("C:/Users/salim/Desktop/01 PhD project/01 Knotweed Orthophoto/01 CNN images/Distance_prediction/img_",round(Predicaton_check$pred[1:length(path)],digits = 2),1:length(path),".JPG")
file.copy(from = path[1],to=newpath[1])
file.copy(from = path,to=newpath)
model1 <- load_model_hdf5("C:/Users/salim/Desktop/01 PhD project/December workshop/01 Distance_filterModel/weights.49-0.03.hdf5")
model1 <- load_model_hdf5("C:/Users/salim/Desktop/01 PhD project/December workshop/01 Distance_filterModel/weights.50-0.03.hdf5")
predictions <- predict(model1,allimages)
###
#min and max of original data
minofdata_dist <- 0.1
maxofdata_dist <- 150
#function
denormalize <- function(x,minofdata,maxofdata) {
x*(maxofdata-minofdata) + minofdata
}
)
#Dist
Pred_dist_denormalized <-denormalize(predictions,minofdata_dist,maxofdata_dist )
#Dist
Pred_dist_denormalized <-denormalize(predictions,minofdata_dist,maxofdata_dist )
###################################################################plot the result
Predicaton_check <- tibble(path_img1,pred=Pred_dist_denormalized)
path <- Predicaton_check$img %>% unlist(.,use.names=FALSE)
#copy files
newpath <- paste0("C:/Users/salim/Desktop/01 PhD project/01 Knotweed Orthophoto/01 CNN images/Distance_prediction/img_",round(Predicaton_check$pred[1:length(path)],digits = 2),1:length(path),".JPG")
file.copy(from = path,to=newpath)
version
update()
update(R)
update("R")
version
install.packages("keras")
devtools::install_github("rstudio/tensorflow",force = TRUE)
install.packages("devtools")
library(devtools)
devtools::install_github("rstudio/tensorflow",force = TRUE)
library(tensorflow)
install_tensorflow(envname = "rtf",version= "2.5.0")
hello<- tf$constant("Hello")
print(hello)
require(raster)
require(raster)
require(raster)
require(rgdal)
library(tidyverse)
install.packages("raster","rgdall","tidyverse","rgeos","ggplot","gtools","gridExtra","dplyr","ROCR","MLmetrics")
install.packages("raster")
require(raster)
require(rgdal)
install.packages("rgdal")
require(rgdal)
install.packages("tidyverse")
library(tidyverse)
1+1
log(100)
log10(100)
sign(90)
cos(90)
require(raster)
require(keras)
require(rgdal)
require(rgeos)
require(stringr)
library(tensorflow)
library(countcolors)
library(raster)
library(rgdal)
library(gtools)
library(doParallel)
library(tfdatasets)
library(tidyverse)
library(sf)
tf$compat$v1$set_random_seed(as.integer(28))
set.seed(28)
library(rinat)
speccheck <- rinat::get_inat_obs(taxon_name = "Reynoutria japonica",quality = "research",maxresults = 20000)
speccheck <- rinat::get_inat_obs(taxon_name = "Reynoutria japonica",quality = "research",maxresults = 10000)
speccheck
head(speccheck)
write.csv(speccheck, "C:/Users/salim/Desktop/01 PhD project/speccheck.csv")
speccheck <- rinat::get_inat_obs(taxon_name = "Japanese knotweed",quality = "research",maxresults = 10000)
speccheck
dim(speccheck)
library(remotes)
install_github("pjhanly/iNatTools")
library(iNatTools)
datasav <- iNatTools::iNat(taxon_name="Reynoutria japonica",photos=TRUE, quality_grade="research")
#load the libraries
require(raster)
require(keras)
require(rgdal)
require(rgeos)
require(stringr)
library(tensorflow)
library(countcolors)
library(raster)
library(rgdal)
library(gtools)
library(doParallel)
library(ggplot2)
library(tibble)
path= "C:/Users/salim/Desktop/01 PhD project/Result_4_check/04 December improvment test/01 F_japonica/11 data for plots/"
path= "C:/Users/salim/Desktop/01 PhD project/Result_4_check/04 December improvment test/01 F_japonica/11 data for plots/"
readthedata <- read.csv(paste0(path,"R2_0.7_Angle_ref_vs_pred_4plot_ResNet50V2.csv"))
readthedata
plot(readthedata$ref,readthedata$pred, ylim=c(0,150), xlim=c(0,150))
readthedata
plot(readthedata$ref,readthedata$pred, ylim=c(0,150), xlim=c(0,150))
max(readthedata$pred)
max(readthedata$ref)
readthedata <- read.csv(paste0(path,"Dist_ref_vs_pred_4plot.csv"))
plot(readthedata$ref,readthedata$pred, ylim=c(0,150), xlim=c(0,150))
cor.test(Dist_ref_Denormalized,Pred_dist_denormalized)$estimate^2
cor.test(readthedata$ref,readthedata$pred)$estimate^2
#plot the data
scat_data <- tibble(Dist_ref=Dist_ref_Denormalized,Pred_distanc=Pred_dist_denormalized)
#plot the data
scat_data <- tibble(Dist_ref=readthedata$ref,Pred_distanc=readthedata$pred)
scat_par <- ggplot(scat_data,aes(Dist_ref,Pred_distanc))+geom_point()+geom_smooth() #+geom_abline(color="orange", slope = 1, linetype ="dotdash",size=1)
scat_par+xlab("Refrence distance")+ylab("Predicted distance")+theme(axis.text=element_text(size=14),
axis.title=element_text(size=16),
panel.background = element_rect(fill = "white", color = "black"))
dev.off()
scat_par <- ggplot(scat_data,aes(Dist_ref,Pred_distanc))+geom_point()+geom_smooth() #+geom_abline(color="orange", slope = 1, linetype ="dotdash",size=1)
scat_par+xlab("Refrence distance")+ylab("Predicted distance")+theme(axis.text=element_text(size=14),
axis.title=element_text(size=16),
panel.background = element_rect(fill = "white", color = "black"))
scat_par+xlab("Refrence distance")+ylab("Predicted distance")+theme(axis.text=element_text(size=14),
axis.title=element_text(size=16),
panel.background = element_rect(fill = "white", color = "black"))
scat_par <- ggplot(scat_data,aes(Dist_ref,Pred_distanc))+geom_point()+geom_smooth() #+geom_abline(color="orange", slope = 1, linetype ="dotdash",size=1)
scat_par+xlab("Refrence distance")+ylab("Predicted distance")+theme(axis.text=element_text(size=14),
axis.title=element_text(size=16),
panel.background = element_rect(fill = "white", color = "black"))
dev.off()
dev.off()
while (!is.null(dev.list()))  dev.off()
scat_par <- ggplot(scat_data,aes(Dist_ref,Pred_distanc))+geom_point()+geom_smooth() #+geom_abline(color="orange", slope = 1, linetype ="dotdash",size=1)
scat_par+xlab("Refrence distance")+ylab("Predicted distance")+theme(axis.text=element_text(size=14),
axis.title=element_text(size=16),
panel.background = element_rect(fill = "white", color = "black"))
scat_par+xlab("Refrence distance")+ylab("Predicted distance")+theme(axis.text=element_text(size=14),
axis.title=element_text(size=16),
panel.background = element_rect(fill = "white", color = "black"))
while (!is.null(dev.list()))  dev.off()
dev.of
dev.off()
dev.set(dev.next())
dev.off()
dev.new()
scat_par <- ggplot(scat_data,aes(Dist_ref,Pred_distanc))+geom_point()+geom_smooth() #+geom_abline(color="orange", slope = 1, linetype ="dotdash",size=1)
scat_par+xlab("Refrence distance")+ylab("Predicted distance")+theme(axis.text=element_text(size=14),
axis.title=element_text(size=16),
panel.background = element_rect(fill = "white", color = "black"))
scat_par <- ggplot(scat_data,aes(Dist_ref,Pred_distanc))+geom_point()+geom_smooth() #+geom_abline(color="orange", slope = 1, linetype ="dotdash",size=1)
scat_par
scat_par+xlab("Refrence distance")+ylab("Predicted distance")+theme(axis.text=element_text(size=14),
axis.title=element_text(size=16),
panel.background = element_rect(fill = "white", color = "black"))
scat_par <- ggplot(scat_data,aes(Dist_ref,Pred_distanc))+geom_point()+geom_smooth() #+geom_abline(color="orange", slope = 1, linetype ="dotdash",size=1)
scat_par+xlab("Refrence distance")+ylab("Predicted distance")+theme(axis.text=element_text(size=14),
axis.title=element_text(size=16),
panel.background = element_rect(fill = "white", color = "black"))
scat_par <- ggplot(scat_data,aes(Dist_ref,Pred_distanc))+geom_point()+geom_smooth() #+geom_abline(color="orange", slope = 1, linetype ="dotdash",size=1)
scat_par+xlab("Refrence distance")+ylab("Predicted distance")+theme(axis.text=element_text(size=14),
axis.title=element_text(size=16),
panel.background = element_rect(fill = "white", color = "black"))
# scatter plot visualization
library(raster)
library(rgdal)
library(ggplot2)
library(tibble)
path= "C:/Users/salim/Desktop/01 PhD project/Result_4_check/04 December improvment test/01 F_japonica/11 data for plots/"
readthedata <- read.csv(paste0(path,"Dist_ref_vs_pred_4plot.csv"))
plot(readthedata$ref,readthedata$pred, ylim=c(0,150), xlim=c(0,150))
cor.test(readthedata$ref,readthedata$pred)$estimate^2
dev.new()
dev.off()
#plot the data
scat_data <- tibble(Dist_ref=readthedata$ref,Pred_distanc=readthedata$pred)
scat_par <- ggplot(scat_data,aes(Dist_ref,Pred_distanc))+geom_point()+geom_smooth() #+geom_abline(color="orange", slope = 1, linetype ="dotdash",size=1)
scat_par+xlab("Refrence distance")+ylab("Predicted distance")+theme(axis.text=element_text(size=14),
axis.title=element_text(size=16),
panel.background = element_rect(fill = "white", color = "black"))
scat_par <- ggplot(scat_data,aes(Dist_ref,Pred_distanc))+geom_point()+geom_smooth() #+geom_abline(color="orange", slope = 1, linetype ="dotdash",size=1)
scat_par
max(readthedata$pred)
max(readthedata$ref)
plot(readthedata$ref,readthedata$pred, ylim=c(0,150), xlim=c(0,150))
scat_par+xlab("Refrence distance")+ylab("Predicted distance")+theme(axis.text=element_text(size=14),
axis.title=element_text(size=16),
panel.background = element_rect(fill = "white", color = "black"))+xlim(0,150)+ylim(0,150)
library(rgdal)
library(ggplot2)
library(tibble)
path= "C:/Users/salim/Desktop/01 PhD project/Result_4_check/04 December improvment test/01 F_japonica/11 data for plots/"
readthedata <- read.csv(paste0(path,"Dist_ref_vs_pred_4plot.csv"))
plot(readthedata$ref,readthedata$pred, ylim=c(0,150), xlim=c(0,150))
cor.test(readthedata$ref,readthedata$pred)$estimate^2
dev.off()
#plot the data
scat_data <- tibble(Dist_ref=readthedata$ref,Pred_distanc=readthedata$pred)
scat_par <- ggplot(scat_data,aes(Dist_ref,Pred_distanc))+geom_point()+geom_smooth() #+geom_abline(color="orange", slope = 1, linetype ="dotdash",size=1)
scat_par+xlab("Refrence distance")+ylab("Predicted distance")+theme(axis.text=element_text(size=14),
axis.title=element_text(size=16),
panel.background = element_rect(fill = "white", color = "black"))+xlim(0,150)+ylim(0,150)
scat_par+xlab("Refrence distance")+ylab("Predicted distance")+theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
panel.background = element_rect(fill = "white", color = "black"))+xlim(0,150)+ylim(0,150)
scat_par+xlab("Refrence distance")+ylab("Predicted distance")+theme(axis.text=element_text(size=18),
axis.title=element_text(size=18),
panel.background = element_rect(fill = "white", color = "black"))+xlim(0,150)+ylim(0,150)
scat_par+xlab("Refrence distance")+ylab("Predicted distance")+theme(axis.text=element_text(size=18),
axis.title=element_text(size=16),
panel.background = element_rect(fill = "white", color = "black"))+xlim(0,150)+ylim(0,150)
scat_par+xlab("Refrence distance")+ylab("Predicted distance")+theme(axis.text=element_text(size=30),
axis.title=element_text(size=16),
panel.background = element_rect(fill = "white", color = "black"))+xlim(0,150)+ylim(0,150)
scat_par+xlab("Refrence distance")+ylab("Predicted distance")+theme(axis.text=element_text(size=24),
axis.title=element_text(size=16),
panel.background = element_rect(fill = "white", color = "black"))+xlim(0,150)+ylim(0,150)
scat_par+xlab("Refrence distance")+ylab("Predicted distance")+theme(axis.text=element_text(size=30),
axis.title=element_text(size=16),
panel.background = element_rect(fill = "white", color = "black"))+xlim(0,150)+ylim(0,150)
scat_par+xlab("Refrence distance")+ylab("Predicted distance")+theme(axis.text=element_text(size=22),
axis.title=element_text(size=16),
panel.background = element_rect(fill = "white", color = "black"))+xlim(0,150)+ylim(0,150)
scat_par+xlab("Refrence distance")+ylab("Predicted distance")+theme(axis.text=element_text(size=24),
axis.title=element_text(size=16),
panel.background = element_rect(fill = "white", color = "black"))+xlim(0,150)+ylim(0,150)
scat_par+xlab("Refrence distance")+ylab("Predicted distance")+theme(axis.text=element_text(size=22),
axis.title=element_text(size=16),
panel.background = element_rect(fill = "white", color = "black"))+xlim(0,150)+ylim(0,150)
require(raster)
require(rgdal)
library(tidyverse)
library(rgeos)
library(ggplot2)
library(gtools)
library(gridExtra)
library(dplyr)
library(ROCR)
library(MLmetrics)
ls("package:MLmetrics")
#set the working directory
path_image <-  "C:/Users/salim/Desktop/01 PhD project/Result_4_check/00 Ortho_photos_refrence_polygons/"
path_pred <- "C:/Users/salim/Desktop/01 PhD project/December workshop/test_accuracy/"
setwd(path_pred)
#load all images
allimgaes <- mixedsort(list.files(path_image,pattern = ".tif",recursive = TRUE,full.names = TRUE))
#load all shapes
allshapes <- mixedsort(list.files(path_image,pattern = "Spekboom.shp",recursive = TRUE,full.names = TRUE))
#load predictions
predictions <- mixedsort(list.files(path = path_pred, pattern = ".tif",full.names = TRUE))
t=1
#load prediction map
pred_map <- stack(predictions[[g]])
#load reference shapefiles
shape <-  readOGR(allshapes[[g]])
# harmonize the coordinate system
shape = gBuffer(shape, byid=TRUE, width=0)
shape = gUnaryUnion(shape)
shape = spTransform(shape, crs(pred_map))%>% crop(extent(pred_map))
#load the orthoimage and crop it ot the prediction map extent
ortho <- stack(allimgaes[[g]]) %>% crop(extent(pred_map))
path_toimage <- "C:/Users/salim/Desktop/01 PhD project/Result_4_check/00 Ortho_photos_refrence_polygons/Spekboom_32_img/"
allimage <- list.files(path_image, pattern = ".tiff")
allimage
path_toimage <- "C:/Users/salim/Desktop/01 PhD project/Result_4_check/00 Ortho_photos_refrence_polygons/Spekboom_32_img/"
allimage <- list.files(path_image, pattern = ".tiff")
allimage
allimage <- list.files(path_image, pattern = ".tif")
allimage
path_image
allimage <- list.files(path_image, pattern = ".tif",recursive = TRUE)
allimage
path_toimage <- "C:/Users/salim/Desktop/01 PhD project/Result_4_check/00 Ortho_photos_refrence_polygons/Spekboom_32_img/"
allimage <- list.files(path_image, pattern = ".tif",recursive = TRUE)
allimage <- list.files(path_toimage, pattern = ".tif",recursive = TRUE)
allimage
allimage <- list.files(path_toimage, pattern = ".tif")
allimage
allimgaes<- allimage[grep("^(?!.*ovr)", allimage, perl=TRUE)]
allimgaes
par(mfrow=c(3,4))
for(i in 1:32){
plotRGB(allimgaes[i])
}
library(raster)
par(mfrow=c(3,4))
for(i in 1:32){
plotRGB(allimgaes[i])
}
plotRGB(stack(allimgaes[i]))
stack(allimgaes[i])
i=1
stack(allimgaes[i])
stack(allimgaes[[i]])
allimgaes
allimgaes[[1]]
stack(allimgaes[[1]])
allimage <- list.files(path_toimage, pattern = ".tif",full.names = TRUE)
allimgaes<- allimage[grep("^(?!.*ovr)", allimage, perl=TRUE)]
par(mfrow=c(3,4))
for(i in 1:32){
plotRGB(stack(allimgaes[[1]]))
}
dev.off()
for(i in 1:32){
plotRGB(stack(allimgaes[[1]]))
}
dev.off()
dev.off()
par(mfrow=c(3,4))
install.packages("prospectr")
setwd("C:/Users/salim/Desktop/00 Final Model check/")
######################read it from csv
vallacc <- read.csv("Hist_adjusted_MeanF1_0.56_Val_metrics.csv")
round(colMeans(vallacc[- c(1,2)]), digits = 2)
######################read it from csv
vallacc <- read.csv("Hist_Updated_OA_MeanF1_0.57_31img_Val_metrics.csv")
round(colMeans(vallacc[- c(1,2)]), digits = 2)
library(xtable)
wacc <- vallacc[- c(1,2)])
wacc <- vallacc[- c(1,2)]
wacc
wacc
print(xtable(wacc))
View(wacc)
wacc
wacc <- vallacc[- c(1,2,7)]
wacc
print(xtable(wacc))
vallacc
round(colMeans(wacc),digits = 2)
